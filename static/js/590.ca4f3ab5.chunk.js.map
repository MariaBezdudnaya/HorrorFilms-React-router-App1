{"version":3,"file":"static/js/590.ca4f3ab5.chunk.js","mappings":"4MAIO,MAAMA,EAAWC,IAAiD,IAAhD,SAAEC,EAAQ,MAAEC,EAAK,KAAEC,EAAI,GAAEC,EAAE,YAAEC,GAAaL,EACjE,OACEM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,EAAAA,KAAA,OACEF,UAAU,aACVG,IAAKT,EACLU,IAAI,YAIRL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CAAC,IAAc,WAG1CC,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,GAAE,GAAAC,OAAKC,EAAAA,EAAOC,MAAK,KAAAF,OAAIV,GAAMG,UAAU,kBAAiBC,SAC3DN,KAEHO,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,GAAE,GAAAC,OAAKC,EAAAA,EAAOC,MAAK,KAAAF,OAAIV,GAAMG,UAAU,iBAAgBC,SAC1DL,UAKPM,EAAAA,EAAAA,KAAA,KAAGF,UAAU,mBAAkBC,SAC5BH,QAGLI,EAAAA,EAAAA,KAAA,MAAIQ,MAAO,CAACC,QAAS,WACjB,E,uCCtBH,MAAMC,EAAcnB,IAAkB,IAAjB,QAAEoB,GAASpB,EACrC,MAAMqB,EAAS,IAAIC,IAAIF,EAAQG,KAAKC,aAAaC,IAAI,UAC/CT,GAAQU,EAAAA,EAAAA,GAAU,SAAU,CAAEL,WAEpC,OAAOM,EAAAA,EAAAA,IAAM,CACXX,SACA,EAGSY,EAAYA,KACvB,MAAM,MAAEZ,IAAUa,EAAAA,EAAAA,OACXL,EAAcM,IAAmBC,EAAAA,EAAAA,MAClCC,EAAkBR,EAAaC,IAAI,WACnC,MAAEQ,IAAUC,EAAAA,EAAAA,OACXb,EAAQc,IAAaC,EAAAA,EAAAA,UAASJ,GAAmB,IAaxD,OAXAK,EAAAA,EAAAA,YAAU,KACRP,GAAiBQ,IACXjB,EACFiB,EAAOC,IAAI,SAAUlB,GAErBiB,EAAOE,OAAO,UAETF,IACP,GACD,CAACjB,EAAQS,KAGVrB,EAAAA,EAAAA,KAACgC,EAAAA,SAAQ,CAACC,UAAUjC,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,IAAInC,UAC7BC,EAAAA,EAAAA,KAACmC,EAAAA,GAAK,CACJC,QAAS7B,EACT8B,cAAcrC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,oCAAsCA,SAEvDQ,IACAV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,KAAA,SACEsC,KAAK,OACLxC,UAAU,eACVyC,YAAY,eACZC,MAAO5B,EACP6B,SAAWC,GAAMhB,EAAUgB,EAAEC,OAAOH,YAGxC3C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,CACZ,YAAVyB,IAAuBxB,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,IAC9B3B,GAASA,EAAMqC,OAAS,EACvBrC,EAAMsC,KAAKC,IACT9C,EAAAA,EAAAA,KAACV,EAAQ,IAAmBwD,GAAbA,EAAKnD,OAGtBK,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,SAAC,kCAMnC,C","sources":["components/FilmCard.jsx","pages/FilmsPage.jsx"],"sourcesContent":["// Карточка фильма в списке\r\nimport { Link } from \"react-router-dom\";\r\nimport { ROUTES } from \"../constants\";\r\n\r\nexport const FilmCard = ({ imageUrl, title, year, id, description }) => {\r\n  return (\r\n    <div className=\"card_item\">\r\n      <div className=\"card-item\">\r\n        <div className=\"card_image\">{/* Картинка */}\r\n          <img \r\n            className=\"card-image\"\r\n            src={imageUrl}\r\n            alt=\"film\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"card-info\">\r\n          <div className=\"card-title\"> {/* title */}\r\n              Film\r\n          </div>\r\n          <Link to={`${ROUTES.films}/${id}`} className=\"film-title_link\">\r\n            {title}\r\n          </Link>\r\n          <div className=\"film-year\">\r\n            <Link to={`${ROUTES.films}/${id}`} className=\"film-year_link\">\r\n              {year}\r\n            </Link>\r\n          </div>\r\n        </div>\r\n\r\n        <p className=\"card-description\">\r\n          {description}\r\n        </p>\r\n      </div>\r\n      <hr style={{opacity: \"15%\"}}/>\r\n    </div> \r\n  );\r\n};\r\n","// Страница с фильмами\r\nimport { Suspense, useEffect, useState } from \"react\";\r\nimport { FilmCard } from \"../components/FilmCard\";\r\nimport { mockFetch } from \"../utils/api\";\r\nimport { Loader } from \"../components/Loader\";\r\nimport {\r\n  Await,\r\n  defer,\r\n  useLoaderData,\r\n  useNavigation,\r\n  useSearchParams,\r\n} from \"react-router-dom\";\r\n\r\nexport const filmsLoader = ({ request }) => {\r\n  const search = new URL(request.url).searchParams.get(\"search\"); // для того, чтобы в адресной строке устанавливались такие же search-параметры, как в поиске на странице\r\n  const films = mockFetch(\"/films\", { search });\r\n\r\n  return defer({\r\n    films,\r\n  });\r\n};\r\n\r\nexport const FilmsPage = () => { \r\n  const { films } = useLoaderData();\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const searchFromQuery = searchParams.get(\"search\");\r\n  const { state } = useNavigation();\r\n  const [search, setSearch] = useState(searchFromQuery || \"\");\r\n\r\n  useEffect(() => { // для того, чтобы в адресной строке устанавливались такие же search-параметры, как в поиске на странице\r\n    setSearchParams((params) => {\r\n      if (search) {\r\n        params.set(\"search\", search);\r\n      } else {\r\n        params.delete(\"search\");\r\n      }\r\n      return params;\r\n    });\r\n  }, [search, setSearchParams]);\r\n\r\n  return (\r\n    <Suspense fallback={<Loader />}>\r\n      <Await\r\n        resolve={films}\r\n        errorElement={<div>Oops, error while loading films</div>}\r\n      >\r\n        {(films) => (\r\n          <div className=\"films_content\">\r\n            <div className=\"films_foundInput\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"search-input\"\r\n                placeholder=\"Search films\"\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"relative\">\r\n              {state === \"loading\" && <Loader />}\r\n              {films && films.length > 0 ? (\r\n                films.map((item) => (\r\n                  <FilmCard key={item.id} {...item} />\r\n                ))\r\n              ) : (\r\n                <div className=\"films_foundError\">Film is not found...</div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Await>\r\n    </Suspense>\r\n  );\r\n};\r\n"],"names":["FilmCard","_ref","imageUrl","title","year","id","description","_jsxs","className","children","_jsx","src","alt","Link","to","concat","ROUTES","films","style","opacity","filmsLoader","request","search","URL","url","searchParams","get","mockFetch","defer","FilmsPage","useLoaderData","setSearchParams","useSearchParams","searchFromQuery","state","useNavigation","setSearch","useState","useEffect","params","set","delete","Suspense","fallback","Loader","Await","resolve","errorElement","type","placeholder","value","onChange","e","target","length","map","item"],"sourceRoot":""}